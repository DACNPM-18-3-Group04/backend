#!/usr/bin/env node
/* eslint-disable */

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('propbook-service:server');
var http = require('http');
const graphqlServer = require('../graphql');
const indexRouter = require('../routes/index.route');
const apiConfig = require('../configs/default.config').api;

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3001');
app.set('port', port);

/**
 * Create HTTP server.
 */

var httpServer = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

// start graphql server with express app as middleware
httpServer.on('error', onError);
httpServer.on('listening', onListening);
const server = graphqlServer(httpServer);
server.start().then(() => {
  server.applyMiddleware({ app, path: `/api/${apiConfig.version}/graphql` });
  app.use('/', indexRouter);

  console.log(
    `ðŸš€ Server ready at http://localhost:${port}${server.graphqlPath}`,
  );
  httpServer.listen(port);
});

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP httpServer "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string' ? 'Pipe ' + port : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP httpServer "listening" event.
 */

function onListening() {
  var addr = httpServer.address();
  var bind = typeof addr === 'string' ? 'pipe ' + addr : 'port ' + addr.port;
  debug('Listening on ' + bind);
  // console.log('Server started. Listening on ' + bind);
}
